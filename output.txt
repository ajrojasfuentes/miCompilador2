section .data
section .bss
a resd 1
b resd 1
c resd 1
section .text
global _start
_start:
    ; Asignación
    mov eax, 0
    mov [a], eax
    ; Asignación
    mov eax, 10
    mov [b], eax
    ; Asignación
    mov eax, 5
    mov [c], eax
    ; Asignación
    mov eax, 0
    mov [a], eax
etiqueta_0:
    ; Condición FOR
    mov eax, b
    cmp eax, 0
    je etiqueta_1
    ; Operación Multiplicativa
    mov eax, a
    ; División
    mov ebx, 2
    cdq
    idiv ebx
    mov [var_3], eax
    ; Operación Multiplicativa
    mov eax, var_3
    imul eax, 2
    mov [var_4], eax
    ; Condición IF
    mov eax, a
    cmp eax, 0
    je etiqueta_2
    ; Imprimir variable
    mov eax, [a]
    call print_number
    jmp etiqueta_3
etiqueta_2:
etiqueta_4:
    ; Condición WHILE
    mov eax, 0
    cmp eax, 0
    je etiqueta_5
    ; Operación Aditiva
    mov eax, c
    sub eax, 1
    mov [var_5], eax
    ; Asignación
    mov eax, var_5
    mov [c], eax
    jmp etiqueta_4
etiqueta_5:
    ; Asignación
    mov eax, 5
    mov [c], eax
etiqueta_3:
    ; Operación Aditiva
    mov eax, a
    add eax, 1
    mov [var_6], eax
    ; Asignación
    mov eax, var_6
    mov [a], eax
    jmp etiqueta_0
etiqueta_1:
    ; Imprimir variable
    mov eax, [a]
    call print_number
    ; Imprimir variable
    mov eax, [c]
    call print_number
    ; Salir del programa
    mov eax, 1
    mov ebx, 0
    int 0x80

; Funciones auxiliares
print_number:
    ; Implementación de print_number
    ret

